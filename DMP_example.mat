%--------------------------------------------------------------------------
%% DMP CARTESIAN MODEL
%--------------------------------------------------------------------------
% This script processes recorded waveforms.mat files demonstrated to the 
% robot. Waveforms are expressed in [m] and are firstly rounded at [10e-4m]
% in order to ensure zero initial velocity.
% After that, waveforms are interpolated to achieve smooth first and second
% derivatives.
% Those values are then used to create [X Y Z] object which is useful to run
% simulation with 'Recorder.slc' in order to retrieve the desire forcing 
% function.
% Once we obtain the desired forcing functions for xyz coordinates, DMP 
% object are ready to be fitted; always run first the 'fit' method, then the
% 'get_forcing_function' one


%% ------------------------------------------------------------------------ 
% 1C - Load recorded waveform
%--------------------------------------------------------------------------
clc

wave_x = load('X.mat');
wave_y = load('Y.mat');
wave_z = load('Z.mat');

wave_x = (wave_x.X)' ;
wave_y = (wave_y.Y)' ;
wave_z = (wave_z.Z)' ;

wave_x = wave_x(2:end,:)  ;    ... il primo elemento risulta essere sempre
wave_y = wave_y(2:end,:)  ;    ... zero, dunque la traiettoria parte dal
wave_z = wave_z(2:end,:)  ;

time = wave_z(:,1);
X.x  = wave_x(:,2);
Y.y  = wave_y(:,2);
Z.z  = wave_z(:,2);

Ts   = 0.001                ;
T    = length(wave_x) * Ts  ; 
time = ( 0 : Ts : (T-Ts) )' ;

X.x = round(X.x,3);
Y.y = round(Y.y,3);
Z.z = round(Z.z,3);

fx = fit(time, X.x,'smoothingspline', 'SmoothingParam', 0.9 );
[X.dx,X.ddx] = differentiate(fx,time);
plot(fx)
grid on
hold on
fy = fit(time, Y.y,'smoothingspline', 'SmoothingParam', 0.9 );
[Y.dy,Y.ddy] = differentiate(fy,time);
plot(fy)
fz = fit(time, Z.z,'smoothingspline', 'SmoothingParam', 0.9 );
[Z.dz,Z.ddz] = differentiate(fz,time);
plot(fz)

x = coeffvalues(fx);
y = coeffvalues(fy);
z = coeffvalues(fz);

X.x = x.coefs(1:end,4);
Y.y = y.coefs(1:end,4);
Z.z = z.coefs(1:end,4);

X.x   = X.x(500:end);
X.dx  = X.dx(500:end-1);
X.ddx = X.ddx(500:end-1);

Y.y   = Y.y(500:end);
Y.dy  = Y.dy(500:end-1);
Y.ddy = Y.ddy(500:end-1);

Z.z   = Z.z(500:end);
Z.dz  = Z.dz(500:end-1);
Z.ddz = Z.ddz(500:end-1);

time = time(1:length(X.x));
T    = time(end) ; 

% qRob = [0.1395 -0.5831 0.4728 -2.6450 0.2938 2.0948 1.1782];

X_init = [ X.x(1), Y.y(1), Z.z(1) ]';

%%clear fx fy fz x y z

X.x     = [ time, X.x   ];
X.dx    = [ time, X.dx  ];
X.ddx   = [ time, X.ddx ];
X.nx    = [ time, flip(X.x(1:end,2))   ];
X.ndx   = [ time, flip(-X.dx(1:end,2)) ];
X.nddx  = [ time, flip(X.ddx(1:end,2)) ];

Y.y     = [ time, Y.y   ];
Y.dy    = [ time, Y.dy  ];
Y.ddy   = [ time, Y.ddy ];
Y.ny    = [ time, flip(Y.y(1:end,2))   ];
Y.ndy   = [ time, flip(-Y.dy(1:end,2)) ];
Y.nddy  = [ time, flip(Y.ddy(1:end,2)) ];

Z.z     = [ time, Z.z   ];
Z.dz    = [ time, Z.dz  ];
Z.ddz   = [ time, Z.ddz ];
Z.norm  = norm(Z.dz(1:end,2));
Z.nz    = [ time, flip(Z.z(1:end,2))   ];
Z.ndz   = [ time, flip(-Z.dz(1:end,2)) ];
Z.nddz  = [ time, flip(Z.ddz(1:end,2)) ];

End = length(Y.ddy);
K   = 50;


%%
%--------------------------------------------------------------------------

clc
xyz = [ X.x(750:3350,2) Y.y(750:3350,2) Z.z(750:3350,2) ]';
[~,~,ttlist,~,~]=frenet_robust(xyz,1000,20);

L = length(X.x);

X.tp = zeros([L, 1]);
Y.tp = zeros([L, 1]);
Z.tp = zeros([L, 1]);

[ ttlist(1,1:500), X.tp(1:749) ] = deal(ttlist(1,501));
[ ttlist(2,1:500), Y.tp(1:749) ] = deal(ttlist(2,501));
[ ttlist(3,1:500), Z.tp(1:749) ] = deal(ttlist(3,501));
[ ttlist(1,2103:2601), X.tp(3351:end)] = deal(ttlist(1,2102));
[ ttlist(2,2103:2601), Y.tp(3351:end)] = deal(ttlist(2,2102));
[ ttlist(3,2103:2601), Z.tp(3351:end)] = deal(ttlist(3,2102));

X.tp(750:3350) = ttlist(1,:)';
Y.tp(750:3350) = ttlist(2,:)';
Z.tp(750:3350) = ttlist(3,:)';

X.tp = flip(X.tp);
Y.tp = flip(Y.tp);
Z.tp = flip(Z.tp);

%--------------------------------------------------------------------------
X_init = [ X.x(1,2), Y.y(1,2), Z.z(1,2) ]';
clear x y z


%% ------------------------------------------------------------------------
% 3 - Model Variables
%--------------------------------------------------------------------------

% Trasformation systems
%--------------------------------------------------------------------------

sys_x = DMP_model        ... 
        (                ...
          100          , ...  N 
          time(end)    , ...  T, phase0
          1            , ...  m 
          8            , ...  a_z
          2            , ...  b_z
          40           , ...  a_py
          1            , ...  t0 
          Ts             ...  Ts    
        ) ;

sys_y = DMP_model        ... 
        (                ...
          100          , ...  N 
          time(end)    , ...  T, phase0
          1            , ...  m 
          8            , ...  a_z
          2            , ...  b_z
          40           , ...  a_py
          1            , ...  t0 
          Ts             ...  Ts    
        ) ;

sys_z = DMP_model        ... 
        (                ...
          100          , ...  N 
          time(end)    , ...  T, phase0
          1            , ...  m 
          8            , ...  a_z
          2            , ...  b_z
          40           , ...  a_py
          1            , ...  t0 
          Ts             ...  Ts    
        ) ;

% Canonical system
%--------------------------------------------------------------------------

sys_c = struct                  ... 
        (                       ...
            'm'      , 1      , ...    
            'a_px'   , 200    , ...
            'phase0' , End*Ts , ...
            't0'     , 1      , ...  smoothing period 
            'tau'    , 1      , ...
            'Ts'     , Ts       ...
        ) ; 
    
wn  = 5;                      ... natural frequency of v-system
wn1 = 12;                     ... natural frequency of goal/forcing_function switch
T   = End*Ts;


%% ------------------------------------------------------------------------
% 4 - Fit models with desired trajectories
%--------------------------------------------------------------------------

% FIT2
%%%

sys_x.begin = X.x(1,2);
sys_x.goal  = X.x(end,2);
sys_y.begin = Y.y(1,2);
sys_y.goal  = Y.y(end,2);
sys_z.begin = Z.z(1,2);
sys_z.goal  = Z.z(end,2);

clear out 

set_param ( 'Recorder/Recorder_V1', 'commented', 'on' ) ;

out = sim (                                                                ...
            'CartesianDMP/Recorder.slx',                                   ...
            'StartTime','0',                                               ...
            'StopTime', num2str( time(end) )                               ...
           );
       
fd_x = out.fd_x.Data;       
fd_y = out.fd_y.Data;
fd_z = out.fd_z.Data;

fd_nx = out.fd_nx.Data;       
fd_ny = out.fd_ny.Data;
fd_nz = out.fd_nz.Data;


%%
%--------------------------------------------------------------------------

clc
tic
sys_x.fit2 ( fd_x, X.x(1:end,2), time, 1 );                           ... fit function where the desired
sys_y.fit2 ( fd_y, Y.y(1:end,2), time, 1 );                           ... forcing term was already calculated
sys_z.fit2 ( fd_z, Z.z(1:end,2), time, 1 );                           ... with 'Recorder.slx'

sys_x.fit2 ( fd_nx, X.nx(1:end,2), time, -1 );                         
sys_y.fit2 ( fd_ny, Y.ny(1:end,2), time, -1 );                           
sys_z.fit2 ( fd_nz, Z.nz(1:end,2), time, -1 ); 

...clear fd_x fd_y fd_z

toc

%%
%--------------------------------------------------------------------------

clc
tic 

sys_x.get_forcing_function( 1 );
sys_y.get_forcing_function( 1 );
sys_z.get_forcing_function( 1 );

sys_x.get_forcing_function( -1 );
sys_y.get_forcing_function( -1 );
sys_z.get_forcing_function( -1 );

toc

T  = End*Ts;
sys_c.a_px = 200;
sys_x.a_py = 0;
sys_y.a_py = 0;
sys_z.a_py = 0;
v0 = 0.4;                                                                   ... default v        
d0 = 0.3;
k1 = 8;
k2 = 1000;
kx = 30;
ky = 8;
kz = 30;

%%
%--------------------------------------------------------------------------

clc
tic
matlabFunction ( sys_x.F  , 'File', '~/path/to/desired/folder/x_forcing_fn');
matlabFunction ( sys_y.F  , 'File', '~/path/to/desired/folder/y_forcing_fn');
matlabFunction ( sys_z.F  , 'File', '~/path/to/desired/folder/z_forcing_fn');

matlabFunction ( sys_x.nF  , 'File', '~/path/to/desired/folder/nx_forcing_fn');
matlabFunction ( sys_y.nF  , 'File', '~/path/to/desired/folder/ny_forcing_fn');
matlabFunction ( sys_z.nF  , 'File', '~/path/to/desired/folder/nz_forcing_fn');
toc









